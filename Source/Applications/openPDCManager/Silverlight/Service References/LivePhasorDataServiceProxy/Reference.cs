//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace openPDCManager.Silverlight.LivePhasorDataServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DuplexMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.Silverlight.LivePhasorDataServiceProxy.ConnectMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DisconnectMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(openPDCManager.Silverlight.LivePhasorDataServiceProxy.LivePhasorDataMessage))]
    public partial class DuplexMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    public partial class ConnectMessage : openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DisconnectMessage", Namespace="http://samples.microsoft.com/silverlight2/duplex")]
    public partial class DisconnectMessage : openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LivePhasorDataMessage", Namespace="http://schemas.datacontract.org/2004/07/PCS.Services.DuplexService")]
    public partial class LivePhasorDataMessage : openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage {
        
        private System.Collections.Generic.Dictionary<string, int> DeviceDistributionListField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.InterconnectionStatus> InterconnectionStatusListField;
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.PmuDistribution> PmuDistributionListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, int> DeviceDistributionList {
            get {
                return this.DeviceDistributionListField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceDistributionListField, value) != true)) {
                    this.DeviceDistributionListField = value;
                    this.RaisePropertyChanged("DeviceDistributionList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.InterconnectionStatus> InterconnectionStatusList {
            get {
                return this.InterconnectionStatusListField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectionStatusListField, value) != true)) {
                    this.InterconnectionStatusListField = value;
                    this.RaisePropertyChanged("InterconnectionStatusList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.PmuDistribution> PmuDistributionList {
            get {
                return this.PmuDistributionListField;
            }
            set {
                if ((object.ReferenceEquals(this.PmuDistributionListField, value) != true)) {
                    this.PmuDistributionListField = value;
                    this.RaisePropertyChanged("PmuDistributionList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InterconnectionStatus", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public partial class InterconnectionStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.MemberStatus> CompanyStatusField;
        
        private string DisplayNameField;
        
        private string InterConnectionField;
        
        private string TotalPmusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.LivePhasorDataServiceProxy.MemberStatus> CompanyStatus {
            get {
                return this.CompanyStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyStatusField, value) != true)) {
                    this.CompanyStatusField = value;
                    this.RaisePropertyChanged("CompanyStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterConnection {
            get {
                return this.InterConnectionField;
            }
            set {
                if ((object.ReferenceEquals(this.InterConnectionField, value) != true)) {
                    this.InterConnectionField = value;
                    this.RaisePropertyChanged("InterConnection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalPmus {
            get {
                return this.TotalPmusField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalPmusField, value) != true)) {
                    this.TotalPmusField = value;
                    this.RaisePropertyChanged("TotalPmus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PmuDistribution", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public partial class PmuDistribution : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AlaskanCountField;
        
        private string EasternCountField;
        
        private string HawaiiCountField;
        
        private string QuebecCountField;
        
        private string StatusField;
        
        private string TexasCountField;
        
        private int TotalField;
        
        private string WesternCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlaskanCount {
            get {
                return this.AlaskanCountField;
            }
            set {
                if ((object.ReferenceEquals(this.AlaskanCountField, value) != true)) {
                    this.AlaskanCountField = value;
                    this.RaisePropertyChanged("AlaskanCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EasternCount {
            get {
                return this.EasternCountField;
            }
            set {
                if ((object.ReferenceEquals(this.EasternCountField, value) != true)) {
                    this.EasternCountField = value;
                    this.RaisePropertyChanged("EasternCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HawaiiCount {
            get {
                return this.HawaiiCountField;
            }
            set {
                if ((object.ReferenceEquals(this.HawaiiCountField, value) != true)) {
                    this.HawaiiCountField = value;
                    this.RaisePropertyChanged("HawaiiCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string QuebecCount {
            get {
                return this.QuebecCountField;
            }
            set {
                if ((object.ReferenceEquals(this.QuebecCountField, value) != true)) {
                    this.QuebecCountField = value;
                    this.RaisePropertyChanged("QuebecCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TexasCount {
            get {
                return this.TexasCountField;
            }
            set {
                if ((object.ReferenceEquals(this.TexasCountField, value) != true)) {
                    this.TexasCountField = value;
                    this.RaisePropertyChanged("TexasCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Total {
            get {
                return this.TotalField;
            }
            set {
                if ((this.TotalField.Equals(value) != true)) {
                    this.TotalField = value;
                    this.RaisePropertyChanged("Total");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WesternCount {
            get {
                return this.WesternCountField;
            }
            set {
                if ((object.ReferenceEquals(this.WesternCountField, value) != true)) {
                    this.WesternCountField = value;
                    this.RaisePropertyChanged("WesternCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberStatus", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public partial class MemberStatus : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int MeasuredLinesField;
        
        private string NameField;
        
        private int ReportingDevicesField;
        
        private string StatusField;
        
        private int TotalDevicesField;
        
        private int ValidatedDevicesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MeasuredLines {
            get {
                return this.MeasuredLinesField;
            }
            set {
                if ((this.MeasuredLinesField.Equals(value) != true)) {
                    this.MeasuredLinesField = value;
                    this.RaisePropertyChanged("MeasuredLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReportingDevices {
            get {
                return this.ReportingDevicesField;
            }
            set {
                if ((this.ReportingDevicesField.Equals(value) != true)) {
                    this.ReportingDevicesField = value;
                    this.RaisePropertyChanged("ReportingDevices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalDevices {
            get {
                return this.TotalDevicesField;
            }
            set {
                if ((this.TotalDevicesField.Equals(value) != true)) {
                    this.TotalDevicesField = value;
                    this.RaisePropertyChanged("TotalDevices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ValidatedDevices {
            get {
                return this.ValidatedDevicesField;
            }
            set {
                if ((this.ValidatedDevicesField.Equals(value) != true)) {
                    this.ValidatedDevicesField = value;
                    this.RaisePropertyChanged("ValidatedDevices");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LivePhasorDataServiceProxy.DuplexService", CallbackContract=typeof(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexServiceCallback))]
    public interface DuplexService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/DuplexService/SendToService")]
        System.IAsyncResult BeginSendToService(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg, System.AsyncCallback callback, object asyncState);
        
        void EndSendToService(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface DuplexServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/DuplexService/SendToClient")]
        void SendToClient(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface DuplexServiceChannel : openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DuplexServiceClient : System.ServiceModel.DuplexClientBase<openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService>, openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService {
        
        private BeginOperationDelegate onBeginSendToServiceDelegate;
        
        private EndOperationDelegate onEndSendToServiceDelegate;
        
        private System.Threading.SendOrPostCallback onSendToServiceCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new DuplexServiceClientCallback(), binding, remoteAddress) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SendToServiceCompleted;
        
        public event System.EventHandler<SendToClientReceivedEventArgs> SendToClientReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService.BeginSendToService(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendToService(msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService.EndSendToService(System.IAsyncResult result) {
            base.Channel.EndSendToService(result);
        }
        
        private System.IAsyncResult OnBeginSendToService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg = ((openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage)(inValues[0]));
            return ((openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService)(this)).BeginSendToService(msg, callback, asyncState);
        }
        
        private object[] OnEndSendToService(System.IAsyncResult result) {
            ((openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService)(this)).EndSendToService(result);
            return null;
        }
        
        private void OnSendToServiceCompleted(object state) {
            if ((this.SendToServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendToServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendToServiceAsync(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg) {
            this.SendToServiceAsync(msg, null);
        }
        
        public void SendToServiceAsync(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg, object userState) {
            if ((this.onBeginSendToServiceDelegate == null)) {
                this.onBeginSendToServiceDelegate = new BeginOperationDelegate(this.OnBeginSendToService);
            }
            if ((this.onEndSendToServiceDelegate == null)) {
                this.onEndSendToServiceDelegate = new EndOperationDelegate(this.OnEndSendToService);
            }
            if ((this.onSendToServiceCompletedDelegate == null)) {
                this.onSendToServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendToServiceCompleted);
            }
            base.InvokeAsync(this.onBeginSendToServiceDelegate, new object[] {
                        msg}, this.onEndSendToServiceDelegate, this.onSendToServiceCompletedDelegate, userState);
        }
        
        private void OnSendToClientReceived(object state) {
            if ((this.SendToClientReceived != null)) {
                object[] results = ((object[])(state));
                this.SendToClientReceived(this, new SendToClientReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (this.SendToClientReceived != null))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService CreateChannel() {
            return new DuplexServiceClientChannel(this);
        }
        
        private class DuplexServiceClientCallback : object, DuplexServiceCallback {
            
            private DuplexServiceClient proxy;
            
            public void Initialize(DuplexServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void SendToClient(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg) {
                this.proxy.OnSendToClientReceived(new object[] {
                            msg});
            }
        }
        
        private class DuplexServiceClientChannel : ChannelBase<openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService>, openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService {
            
            public DuplexServiceClientChannel(System.ServiceModel.DuplexClientBase<openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSendToService(openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = msg;
                System.IAsyncResult _result = base.BeginInvoke("SendToService", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSendToService(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SendToService", _args, result);
            }
        }
    }
    
    public class SendToClientReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendToClientReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage msg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.Silverlight.LivePhasorDataServiceProxy.DuplexMessage)(this.results[0]));
            }
        }
    }
}
