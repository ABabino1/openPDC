//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace openPDCManager.Silverlight.PhasorDataServiceProxy {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Node", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Node : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private string DescriptionField;
        
        private bool EnabledField;
        
        private System.Guid IDField;
        
        private string ImageField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private int LoadOrderField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private bool MasterField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Master {
            get {
                return this.MasterField;
            }
            set {
                if ((this.MasterField.Equals(value) != true)) {
                    this.MasterField = value;
                    this.RaisePropertyChanged("Master");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Company", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Company : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private int IDField;
        
        private int LoadOrderField;
        
        private string MapAcronymField;
        
        private string NameField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MapAcronym {
            get {
                return this.MapAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.MapAcronymField, value) != true)) {
                    this.MapAcronymField = value;
                    this.RaisePropertyChanged("MapAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Historian", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Historian : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string AssemblyNameField;
        
        private string ConnectionStringField;
        
        private string DescriptionField;
        
        private bool EnabledField;
        
        private int IDField;
        
        private bool IsLocalField;
        
        private int LoadOrderField;
        
        private string NameField;
        
        private System.Guid NodeIDField;
        
        private string NodeNameField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocal {
            get {
                return this.IsLocalField;
            }
            set {
                if ((this.IsLocalField.Equals(value) != true)) {
                    this.IsLocalField = value;
                    this.RaisePropertyChanged("IsLocal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((this.NodeIDField.Equals(value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vendor", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Vendor : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string ContactEmailField;
        
        private int IDField;
        
        private string NameField;
        
        private string PhoneNumberField;
        
        private string URLField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactEmail {
            get {
                return this.ContactEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactEmailField, value) != true)) {
                    this.ContactEmailField = value;
                    this.RaisePropertyChanged("ContactEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VendorDevice", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class VendorDevice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int IDField;
        
        private string NameField;
        
        private string URLField;
        
        private int VendorIDField;
        
        private string VendorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string URL {
            get {
                return this.URLField;
            }
            set {
                if ((object.ReferenceEquals(this.URLField, value) != true)) {
                    this.URLField = value;
                    this.RaisePropertyChanged("URL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VendorID {
            get {
                return this.VendorIDField;
            }
            set {
                if ((this.VendorIDField.Equals(value) != true)) {
                    this.VendorIDField = value;
                    this.RaisePropertyChanged("VendorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorName {
            get {
                return this.VendorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorNameField, value) != true)) {
                    this.VendorNameField = value;
                    this.RaisePropertyChanged("VendorName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Device", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Device : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int AccessIDField;
        
        private string AcronymField;
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private string ConnectionStringField;
        
        private string ContactListField;
        
        private double DataLossIntervalField;
        
        private bool EnabledField;
        
        private string HistorianAcronymField;
        
        private System.Nullable<int> HistorianIDField;
        
        private int IDField;
        
        private System.Nullable<int> InterconnectionIDField;
        
        private string InterconnectionNameField;
        
        private bool IsConcentratorField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private int LoadOrderField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private System.Nullable<int> MeasuredLinesField;
        
        private string NameField;
        
        private System.Guid NodeIDField;
        
        private string NodeNameField;
        
        private string ParentAcronymField;
        
        private System.Nullable<int> ParentIDField;
        
        private System.Nullable<int> ProtocolIDField;
        
        private string ProtocolNameField;
        
        private long TimeAdjustmentTicksField;
        
        private string TimeZoneField;
        
        private System.Nullable<int> VendorDeviceIDField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessID {
            get {
                return this.AccessIDField;
            }
            set {
                if ((this.AccessIDField.Equals(value) != true)) {
                    this.AccessIDField = value;
                    this.RaisePropertyChanged("AccessID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactList {
            get {
                return this.ContactListField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactListField, value) != true)) {
                    this.ContactListField = value;
                    this.RaisePropertyChanged("ContactList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DataLossInterval {
            get {
                return this.DataLossIntervalField;
            }
            set {
                if ((this.DataLossIntervalField.Equals(value) != true)) {
                    this.DataLossIntervalField = value;
                    this.RaisePropertyChanged("DataLossInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HistorianAcronym {
            get {
                return this.HistorianAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.HistorianAcronymField, value) != true)) {
                    this.HistorianAcronymField = value;
                    this.RaisePropertyChanged("HistorianAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HistorianID {
            get {
                return this.HistorianIDField;
            }
            set {
                if ((this.HistorianIDField.Equals(value) != true)) {
                    this.HistorianIDField = value;
                    this.RaisePropertyChanged("HistorianID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InterconnectionID {
            get {
                return this.InterconnectionIDField;
            }
            set {
                if ((this.InterconnectionIDField.Equals(value) != true)) {
                    this.InterconnectionIDField = value;
                    this.RaisePropertyChanged("InterconnectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterconnectionName {
            get {
                return this.InterconnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectionNameField, value) != true)) {
                    this.InterconnectionNameField = value;
                    this.RaisePropertyChanged("InterconnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcentrator {
            get {
                return this.IsConcentratorField;
            }
            set {
                if ((this.IsConcentratorField.Equals(value) != true)) {
                    this.IsConcentratorField = value;
                    this.RaisePropertyChanged("IsConcentrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MeasuredLines {
            get {
                return this.MeasuredLinesField;
            }
            set {
                if ((this.MeasuredLinesField.Equals(value) != true)) {
                    this.MeasuredLinesField = value;
                    this.RaisePropertyChanged("MeasuredLines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((this.NodeIDField.Equals(value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParentAcronym {
            get {
                return this.ParentAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentAcronymField, value) != true)) {
                    this.ParentAcronymField = value;
                    this.RaisePropertyChanged("ParentAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ProtocolID {
            get {
                return this.ProtocolIDField;
            }
            set {
                if ((this.ProtocolIDField.Equals(value) != true)) {
                    this.ProtocolIDField = value;
                    this.RaisePropertyChanged("ProtocolID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProtocolName {
            get {
                return this.ProtocolNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProtocolNameField, value) != true)) {
                    this.ProtocolNameField = value;
                    this.RaisePropertyChanged("ProtocolName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TimeAdjustmentTicks {
            get {
                return this.TimeAdjustmentTicksField;
            }
            set {
                if ((this.TimeAdjustmentTicksField.Equals(value) != true)) {
                    this.TimeAdjustmentTicksField = value;
                    this.RaisePropertyChanged("TimeAdjustmentTicks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeZone {
            get {
                return this.TimeZoneField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeZoneField, value) != true)) {
                    this.TimeZoneField = value;
                    this.RaisePropertyChanged("TimeZone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VendorDeviceID {
            get {
                return this.VendorDeviceIDField;
            }
            set {
                if ((this.VendorDeviceIDField.Equals(value) != true)) {
                    this.VendorDeviceIDField = value;
                    this.RaisePropertyChanged("VendorDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OtherDevice", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class OtherDevice : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private System.Nullable<int> CompanyIDField;
        
        private string CompanyNameField;
        
        private bool DesiredField;
        
        private int IDField;
        
        private bool InProgressField;
        
        private System.Nullable<int> InterconnectionIDField;
        
        private string InterconnectionNameField;
        
        private bool IsConcentratorField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private string NameField;
        
        private bool PlannedField;
        
        private System.Nullable<int> VendorDeviceIDField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((this.CompanyIDField.Equals(value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Desired {
            get {
                return this.DesiredField;
            }
            set {
                if ((this.DesiredField.Equals(value) != true)) {
                    this.DesiredField = value;
                    this.RaisePropertyChanged("Desired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InProgress {
            get {
                return this.InProgressField;
            }
            set {
                if ((this.InProgressField.Equals(value) != true)) {
                    this.InProgressField = value;
                    this.RaisePropertyChanged("InProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InterconnectionID {
            get {
                return this.InterconnectionIDField;
            }
            set {
                if ((this.InterconnectionIDField.Equals(value) != true)) {
                    this.InterconnectionIDField = value;
                    this.RaisePropertyChanged("InterconnectionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InterconnectionName {
            get {
                return this.InterconnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InterconnectionNameField, value) != true)) {
                    this.InterconnectionNameField = value;
                    this.RaisePropertyChanged("InterconnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsConcentrator {
            get {
                return this.IsConcentratorField;
            }
            set {
                if ((this.IsConcentratorField.Equals(value) != true)) {
                    this.IsConcentratorField = value;
                    this.RaisePropertyChanged("IsConcentrator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Planned {
            get {
                return this.PlannedField;
            }
            set {
                if ((this.PlannedField.Equals(value) != true)) {
                    this.PlannedField = value;
                    this.RaisePropertyChanged("Planned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> VendorDeviceID {
            get {
                return this.VendorDeviceIDField;
            }
            set {
                if ((this.VendorDeviceIDField.Equals(value) != true)) {
                    this.VendorDeviceIDField = value;
                    this.RaisePropertyChanged("VendorDeviceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatedMeasurement", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class CalculatedMeasurement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private bool AllowSortsByArrivalField;
        
        private string AssemblyNameField;
        
        private string ConfigSectionField;
        
        private string ConnectionStringField;
        
        private bool EnabledField;
        
        private int FramesPerSecondField;
        
        private int IDField;
        
        private string InputMeasurementsField;
        
        private double LagTimeField;
        
        private double LeadTimeField;
        
        private int LoadOrderField;
        
        private int MinimumMeasurementsToUseField;
        
        private string NameField;
        
        private System.Guid NodeIdField;
        
        private string NodeNameField;
        
        private string OutputMeasurementsField;
        
        private string TypeNameField;
        
        private bool UseLocalClockAsRealTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSortsByArrival {
            get {
                return this.AllowSortsByArrivalField;
            }
            set {
                if ((this.AllowSortsByArrivalField.Equals(value) != true)) {
                    this.AllowSortsByArrivalField = value;
                    this.RaisePropertyChanged("AllowSortsByArrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConfigSection {
            get {
                return this.ConfigSectionField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfigSectionField, value) != true)) {
                    this.ConfigSectionField = value;
                    this.RaisePropertyChanged("ConfigSection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FramesPerSecond {
            get {
                return this.FramesPerSecondField;
            }
            set {
                if ((this.FramesPerSecondField.Equals(value) != true)) {
                    this.FramesPerSecondField = value;
                    this.RaisePropertyChanged("FramesPerSecond");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InputMeasurements {
            get {
                return this.InputMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.InputMeasurementsField, value) != true)) {
                    this.InputMeasurementsField = value;
                    this.RaisePropertyChanged("InputMeasurements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LagTime {
            get {
                return this.LagTimeField;
            }
            set {
                if ((this.LagTimeField.Equals(value) != true)) {
                    this.LagTimeField = value;
                    this.RaisePropertyChanged("LagTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double LeadTime {
            get {
                return this.LeadTimeField;
            }
            set {
                if ((this.LeadTimeField.Equals(value) != true)) {
                    this.LeadTimeField = value;
                    this.RaisePropertyChanged("LeadTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinimumMeasurementsToUse {
            get {
                return this.MinimumMeasurementsToUseField;
            }
            set {
                if ((this.MinimumMeasurementsToUseField.Equals(value) != true)) {
                    this.MinimumMeasurementsToUseField = value;
                    this.RaisePropertyChanged("MinimumMeasurementsToUse");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeId {
            get {
                return this.NodeIdField;
            }
            set {
                if ((this.NodeIdField.Equals(value) != true)) {
                    this.NodeIdField = value;
                    this.RaisePropertyChanged("NodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutputMeasurements {
            get {
                return this.OutputMeasurementsField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputMeasurementsField, value) != true)) {
                    this.OutputMeasurementsField = value;
                    this.RaisePropertyChanged("OutputMeasurements");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseLocalClockAsRealTime {
            get {
                return this.UseLocalClockAsRealTimeField;
            }
            set {
                if ((this.UseLocalClockAsRealTimeField.Equals(value) != true)) {
                    this.UseLocalClockAsRealTimeField = value;
                    this.RaisePropertyChanged("UseLocalClockAsRealTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdapterType", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public enum AdapterType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Action = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Input = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Output = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Adapter", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.Entities")]
    public partial class Adapter : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AdapterNameField;
        
        private string AssemblyNameField;
        
        private string ConnectionStringField;
        
        private bool EnabledField;
        
        private int IDField;
        
        private int LoadOrderField;
        
        private System.Guid NodeIDField;
        
        private string NodeNameField;
        
        private string TypeNameField;
        
        private openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterName {
            get {
                return this.AdapterNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterNameField, value) != true)) {
                    this.AdapterNameField = value;
                    this.RaisePropertyChanged("AdapterName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyName {
            get {
                return this.AssemblyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyNameField, value) != true)) {
                    this.AssemblyNameField = value;
                    this.RaisePropertyChanged("AssemblyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ConnectionString {
            get {
                return this.ConnectionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ConnectionStringField, value) != true)) {
                    this.ConnectionStringField = value;
                    this.RaisePropertyChanged("ConnectionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Enabled {
            get {
                return this.EnabledField;
            }
            set {
                if ((this.EnabledField.Equals(value) != true)) {
                    this.EnabledField = value;
                    this.RaisePropertyChanged("Enabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LoadOrder {
            get {
                return this.LoadOrderField;
            }
            set {
                if ((this.LoadOrderField.Equals(value) != true)) {
                    this.LoadOrderField = value;
                    this.RaisePropertyChanged("LoadOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((this.NodeIDField.Equals(value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NodeName {
            get {
                return this.NodeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeNameField, value) != true)) {
                    this.NodeNameField = value;
                    this.RaisePropertyChanged("NodeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType {
            get {
                return this.adapterTypeField;
            }
            set {
                if ((this.adapterTypeField.Equals(value) != true)) {
                    this.adapterTypeField = value;
                    this.RaisePropertyChanged("adapterType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IaonTree", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public partial class IaonTree : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> AdapterListField;
        
        private string AdapterTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> AdapterList {
            get {
                return this.AdapterListField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterListField, value) != true)) {
                    this.AdapterListField = value;
                    this.RaisePropertyChanged("AdapterList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdapterType {
            get {
                return this.AdapterTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.AdapterTypeField, value) != true)) {
                    this.AdapterTypeField = value;
                    this.RaisePropertyChanged("AdapterType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapType", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public enum MapType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Active = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Planning = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapData", Namespace="http://schemas.datacontract.org/2004/07/openPDCManager.Web.Data.BusinessObjects")]
    public partial class MapData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AcronymField;
        
        private string CompanyMapAcronymField;
        
        private string CompanyNameField;
        
        private bool DesiredField;
        
        private string DeviceTypeField;
        
        private int IDField;
        
        private bool InProgressField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private string NameField;
        
        private System.Nullable<System.Guid> NodeIDField;
        
        private bool PlannedField;
        
        private bool ReportingField;
        
        private string VendorDeviceNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Acronym {
            get {
                return this.AcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.AcronymField, value) != true)) {
                    this.AcronymField = value;
                    this.RaisePropertyChanged("Acronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyMapAcronym {
            get {
                return this.CompanyMapAcronymField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyMapAcronymField, value) != true)) {
                    this.CompanyMapAcronymField = value;
                    this.RaisePropertyChanged("CompanyMapAcronym");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName {
            get {
                return this.CompanyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyNameField, value) != true)) {
                    this.CompanyNameField = value;
                    this.RaisePropertyChanged("CompanyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Desired {
            get {
                return this.DesiredField;
            }
            set {
                if ((this.DesiredField.Equals(value) != true)) {
                    this.DesiredField = value;
                    this.RaisePropertyChanged("Desired");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceType {
            get {
                return this.DeviceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceTypeField, value) != true)) {
                    this.DeviceTypeField = value;
                    this.RaisePropertyChanged("DeviceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InProgress {
            get {
                return this.InProgressField;
            }
            set {
                if ((this.InProgressField.Equals(value) != true)) {
                    this.InProgressField = value;
                    this.RaisePropertyChanged("InProgress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> NodeID {
            get {
                return this.NodeIDField;
            }
            set {
                if ((this.NodeIDField.Equals(value) != true)) {
                    this.NodeIDField = value;
                    this.RaisePropertyChanged("NodeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Planned {
            get {
                return this.PlannedField;
            }
            set {
                if ((this.PlannedField.Equals(value) != true)) {
                    this.PlannedField = value;
                    this.RaisePropertyChanged("Planned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Reporting {
            get {
                return this.ReportingField;
            }
            set {
                if ((this.ReportingField.Equals(value) != true)) {
                    this.ReportingField = value;
                    this.RaisePropertyChanged("Reporting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VendorDeviceName {
            get {
                return this.VendorDeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorDeviceNameField, value) != true)) {
                    this.VendorDeviceNameField = value;
                    this.RaisePropertyChanged("VendorDeviceName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhasorDataServiceProxy.IPhasorDataService")]
    public interface IPhasorDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetNodeList", ReplyAction="http://tempuri.org/IPhasorDataService/GetNodeListResponse")]
        System.IAsyncResult BeginGetNodeList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> EndGetNodeList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetNodes", ReplyAction="http://tempuri.org/IPhasorDataService/GetNodesResponse")]
        System.IAsyncResult BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<System.Guid, string> EndGetNodes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveNode", ReplyAction="http://tempuri.org/IPhasorDataService/SaveNodeResponse")]
        System.IAsyncResult BeginSaveNode(openPDCManager.Silverlight.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveNode(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCompanyList", ReplyAction="http://tempuri.org/IPhasorDataService/GetCompanyListResponse")]
        System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> EndGetCompanyList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCompanies", ReplyAction="http://tempuri.org/IPhasorDataService/GetCompaniesResponse")]
        System.IAsyncResult BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetCompanies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveCompany", ReplyAction="http://tempuri.org/IPhasorDataService/SaveCompanyResponse")]
        System.IAsyncResult BeginSaveCompany(openPDCManager.Silverlight.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveCompany(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetHistorianList", ReplyAction="http://tempuri.org/IPhasorDataService/GetHistorianListResponse")]
        System.IAsyncResult BeginGetHistorianList(System.Guid nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> EndGetHistorianList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveHistorian", ReplyAction="http://tempuri.org/IPhasorDataService/SaveHistorianResponse")]
        System.IAsyncResult BeginSaveHistorian(openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveHistorian(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetHistorians", ReplyAction="http://tempuri.org/IPhasorDataService/GetHistoriansResponse")]
        System.IAsyncResult BeginGetHistorians(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetHistorians(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorList", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorListResponse")]
        System.IAsyncResult BeginGetVendorList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> EndGetVendorList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendors", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorsResponse")]
        System.IAsyncResult BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetVendors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveVendor", ReplyAction="http://tempuri.org/IPhasorDataService/SaveVendorResponse")]
        System.IAsyncResult BeginSaveVendor(openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveVendor(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorDeviceListResponse")]
        System.IAsyncResult BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> EndGetVendorDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveVendorDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveVendorDeviceResponse")]
        System.IAsyncResult BeginSaveVendorDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveVendorDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetVendorDevices", ReplyAction="http://tempuri.org/IPhasorDataService/GetVendorDevicesResponse")]
        System.IAsyncResult BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetVendorDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceListResponse")]
        System.IAsyncResult BeginGetDeviceList(System.Guid nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> EndGetDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDevices", ReplyAction="http://tempuri.org/IPhasorDataService/GetDevicesResponse")]
        System.IAsyncResult BeginGetDevices(bool concentratorOnly, bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetDevices(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveDeviceResponse")]
        System.IAsyncResult BeginSaveDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.Device device, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetDeviceByDeviceID", ReplyAction="http://tempuri.org/IPhasorDataService/GetDeviceByDeviceIDResponse")]
        System.IAsyncResult BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.Silverlight.PhasorDataServiceProxy.Device EndGetDeviceByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceList", ReplyAction="http://tempuri.org/IPhasorDataService/GetOtherDeviceListResponse")]
        System.IAsyncResult BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> EndGetOtherDeviceList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveOtherDevice", ReplyAction="http://tempuri.org/IPhasorDataService/SaveOtherDeviceResponse")]
        System.IAsyncResult BeginSaveOtherDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveOtherDevice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetOtherDeviceByDeviceID", ReplyAction="http://tempuri.org/IPhasorDataService/GetOtherDeviceByDeviceIDResponse")]
        System.IAsyncResult BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState);
        
        openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice EndGetOtherDeviceByDeviceID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetInterconnections", ReplyAction="http://tempuri.org/IPhasorDataService/GetInterconnectionsResponse")]
        System.IAsyncResult BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetInterconnections(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetProtocols", ReplyAction="http://tempuri.org/IPhasorDataService/GetProtocolsResponse")]
        System.IAsyncResult BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetProtocols(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetCalculatedMeasurementList", ReplyAction="http://tempuri.org/IPhasorDataService/GetCalculatedMeasurementListResponse")]
        System.IAsyncResult BeginGetCalculatedMeasurementList(System.Guid nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> EndGetCalculatedMeasurementList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveCalculatedMeasurement", ReplyAction="http://tempuri.org/IPhasorDataService/SaveCalculatedMeasurementResponse")]
        System.IAsyncResult BeginSaveCalculatedMeasurement(openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveCalculatedMeasurement(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetAdapterList", ReplyAction="http://tempuri.org/IPhasorDataService/GetAdapterListResponse")]
        System.IAsyncResult BeginGetAdapterList(bool enabledOnly, openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType, System.Guid nodeID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> EndGetAdapterList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/SaveAdapter", ReplyAction="http://tempuri.org/IPhasorDataService/SaveAdapterResponse")]
        System.IAsyncResult BeginSaveAdapter(openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState);
        
        string EndSaveAdapter(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetIaonTreeData", ReplyAction="http://tempuri.org/IPhasorDataService/GetIaonTreeDataResponse")]
        System.IAsyncResult BeginGetIaonTreeData(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> EndGetIaonTreeData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetTimeZones", ReplyAction="http://tempuri.org/IPhasorDataService/GetTimeZonesResponse")]
        System.IAsyncResult BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetTimeZones(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPhasorDataService/GetMapData", ReplyAction="http://tempuri.org/IPhasorDataService/GetMapDataResponse")]
        System.IAsyncResult BeginGetMapData(openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> EndGetMapData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IPhasorDataServiceChannel : openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<System.Guid, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<System.Guid, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveNodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveNodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCompanyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompanyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetHistorianListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistorianListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveHistorianCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveHistorianCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetHistoriansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetHistoriansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetVendorListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetVendorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveVendorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveVendorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetVendorDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveVendorDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveVendorDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetVendorDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVendorDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDevicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDevicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetDeviceByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeviceByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.Silverlight.PhasorDataServiceProxy.Device Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.Silverlight.PhasorDataServiceProxy.Device)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetOtherDeviceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOtherDeviceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveOtherDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveOtherDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetOtherDeviceByDeviceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetOtherDeviceByDeviceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetInterconnectionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInterconnectionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetProtocolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProtocolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCalculatedMeasurementListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCalculatedMeasurementListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveCalculatedMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveCalculatedMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAdapterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdapterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SaveAdapterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveAdapterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetIaonTreeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetIaonTreeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTimeZonesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTimeZonesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetMapDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMapDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class PhasorDataServiceClient : System.ServiceModel.ClientBase<openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService>, openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService {
        
        private BeginOperationDelegate onBeginGetNodeListDelegate;
        
        private EndOperationDelegate onEndGetNodeListDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodeListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNodesDelegate;
        
        private EndOperationDelegate onEndGetNodesDelegate;
        
        private System.Threading.SendOrPostCallback onGetNodesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveNodeDelegate;
        
        private EndOperationDelegate onEndSaveNodeDelegate;
        
        private System.Threading.SendOrPostCallback onSaveNodeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompanyListDelegate;
        
        private EndOperationDelegate onEndGetCompanyListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompanyListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCompaniesDelegate;
        
        private EndOperationDelegate onEndGetCompaniesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCompaniesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCompanyDelegate;
        
        private EndOperationDelegate onEndSaveCompanyDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCompanyCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistorianListDelegate;
        
        private EndOperationDelegate onEndGetHistorianListDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistorianListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveHistorianDelegate;
        
        private EndOperationDelegate onEndSaveHistorianDelegate;
        
        private System.Threading.SendOrPostCallback onSaveHistorianCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetHistoriansDelegate;
        
        private EndOperationDelegate onEndGetHistoriansDelegate;
        
        private System.Threading.SendOrPostCallback onGetHistoriansCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorListDelegate;
        
        private EndOperationDelegate onEndGetVendorListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorsDelegate;
        
        private EndOperationDelegate onEndGetVendorsDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveVendorDelegate;
        
        private EndOperationDelegate onEndSaveVendorDelegate;
        
        private System.Threading.SendOrPostCallback onSaveVendorCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorDeviceListDelegate;
        
        private EndOperationDelegate onEndGetVendorDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveVendorDeviceDelegate;
        
        private EndOperationDelegate onEndSaveVendorDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveVendorDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVendorDevicesDelegate;
        
        private EndOperationDelegate onEndGetVendorDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetVendorDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceListDelegate;
        
        private EndOperationDelegate onEndGetDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDevicesDelegate;
        
        private EndOperationDelegate onEndGetDevicesDelegate;
        
        private System.Threading.SendOrPostCallback onGetDevicesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDeviceDelegate;
        
        private EndOperationDelegate onEndSaveDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeviceByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetDeviceByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeviceByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOtherDeviceListDelegate;
        
        private EndOperationDelegate onEndGetOtherDeviceListDelegate;
        
        private System.Threading.SendOrPostCallback onGetOtherDeviceListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveOtherDeviceDelegate;
        
        private EndOperationDelegate onEndSaveOtherDeviceDelegate;
        
        private System.Threading.SendOrPostCallback onSaveOtherDeviceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetOtherDeviceByDeviceIDDelegate;
        
        private EndOperationDelegate onEndGetOtherDeviceByDeviceIDDelegate;
        
        private System.Threading.SendOrPostCallback onGetOtherDeviceByDeviceIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInterconnectionsDelegate;
        
        private EndOperationDelegate onEndGetInterconnectionsDelegate;
        
        private System.Threading.SendOrPostCallback onGetInterconnectionsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProtocolsDelegate;
        
        private EndOperationDelegate onEndGetProtocolsDelegate;
        
        private System.Threading.SendOrPostCallback onGetProtocolsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCalculatedMeasurementListDelegate;
        
        private EndOperationDelegate onEndGetCalculatedMeasurementListDelegate;
        
        private System.Threading.SendOrPostCallback onGetCalculatedMeasurementListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveCalculatedMeasurementDelegate;
        
        private EndOperationDelegate onEndSaveCalculatedMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onSaveCalculatedMeasurementCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdapterListDelegate;
        
        private EndOperationDelegate onEndGetAdapterListDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdapterListCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveAdapterDelegate;
        
        private EndOperationDelegate onEndSaveAdapterDelegate;
        
        private System.Threading.SendOrPostCallback onSaveAdapterCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetIaonTreeDataDelegate;
        
        private EndOperationDelegate onEndGetIaonTreeDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetIaonTreeDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTimeZonesDelegate;
        
        private EndOperationDelegate onEndGetTimeZonesDelegate;
        
        private System.Threading.SendOrPostCallback onGetTimeZonesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMapDataDelegate;
        
        private EndOperationDelegate onEndGetMapDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetMapDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PhasorDataServiceClient() {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhasorDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhasorDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetNodeListCompletedEventArgs> GetNodeListCompleted;
        
        public event System.EventHandler<GetNodesCompletedEventArgs> GetNodesCompleted;
        
        public event System.EventHandler<SaveNodeCompletedEventArgs> SaveNodeCompleted;
        
        public event System.EventHandler<GetCompanyListCompletedEventArgs> GetCompanyListCompleted;
        
        public event System.EventHandler<GetCompaniesCompletedEventArgs> GetCompaniesCompleted;
        
        public event System.EventHandler<SaveCompanyCompletedEventArgs> SaveCompanyCompleted;
        
        public event System.EventHandler<GetHistorianListCompletedEventArgs> GetHistorianListCompleted;
        
        public event System.EventHandler<SaveHistorianCompletedEventArgs> SaveHistorianCompleted;
        
        public event System.EventHandler<GetHistoriansCompletedEventArgs> GetHistoriansCompleted;
        
        public event System.EventHandler<GetVendorListCompletedEventArgs> GetVendorListCompleted;
        
        public event System.EventHandler<GetVendorsCompletedEventArgs> GetVendorsCompleted;
        
        public event System.EventHandler<SaveVendorCompletedEventArgs> SaveVendorCompleted;
        
        public event System.EventHandler<GetVendorDeviceListCompletedEventArgs> GetVendorDeviceListCompleted;
        
        public event System.EventHandler<SaveVendorDeviceCompletedEventArgs> SaveVendorDeviceCompleted;
        
        public event System.EventHandler<GetVendorDevicesCompletedEventArgs> GetVendorDevicesCompleted;
        
        public event System.EventHandler<GetDeviceListCompletedEventArgs> GetDeviceListCompleted;
        
        public event System.EventHandler<GetDevicesCompletedEventArgs> GetDevicesCompleted;
        
        public event System.EventHandler<SaveDeviceCompletedEventArgs> SaveDeviceCompleted;
        
        public event System.EventHandler<GetDeviceByDeviceIDCompletedEventArgs> GetDeviceByDeviceIDCompleted;
        
        public event System.EventHandler<GetOtherDeviceListCompletedEventArgs> GetOtherDeviceListCompleted;
        
        public event System.EventHandler<SaveOtherDeviceCompletedEventArgs> SaveOtherDeviceCompleted;
        
        public event System.EventHandler<GetOtherDeviceByDeviceIDCompletedEventArgs> GetOtherDeviceByDeviceIDCompleted;
        
        public event System.EventHandler<GetInterconnectionsCompletedEventArgs> GetInterconnectionsCompleted;
        
        public event System.EventHandler<GetProtocolsCompletedEventArgs> GetProtocolsCompleted;
        
        public event System.EventHandler<GetCalculatedMeasurementListCompletedEventArgs> GetCalculatedMeasurementListCompleted;
        
        public event System.EventHandler<SaveCalculatedMeasurementCompletedEventArgs> SaveCalculatedMeasurementCompleted;
        
        public event System.EventHandler<GetAdapterListCompletedEventArgs> GetAdapterListCompleted;
        
        public event System.EventHandler<SaveAdapterCompletedEventArgs> SaveAdapterCompleted;
        
        public event System.EventHandler<GetIaonTreeDataCompletedEventArgs> GetIaonTreeDataCompleted;
        
        public event System.EventHandler<GetTimeZonesCompletedEventArgs> GetTimeZonesCompleted;
        
        public event System.EventHandler<GetMapDataCompletedEventArgs> GetMapDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetNodeList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodeList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetNodeList(System.IAsyncResult result) {
            return base.Channel.EndGetNodeList(result);
        }
        
        private System.IAsyncResult OnBeginGetNodeList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetNodeList(callback, asyncState);
        }
        
        private object[] OnEndGetNodeList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetNodeList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodeListCompleted(object state) {
            if ((this.GetNodeListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodeListCompleted(this, new GetNodeListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodeListAsync() {
            this.GetNodeListAsync(null);
        }
        
        public void GetNodeListAsync(object userState) {
            if ((this.onBeginGetNodeListDelegate == null)) {
                this.onBeginGetNodeListDelegate = new BeginOperationDelegate(this.OnBeginGetNodeList);
            }
            if ((this.onEndGetNodeListDelegate == null)) {
                this.onEndGetNodeListDelegate = new EndOperationDelegate(this.OnEndGetNodeList);
            }
            if ((this.onGetNodeListCompletedDelegate == null)) {
                this.onGetNodeListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodeListCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodeListDelegate, null, this.onEndGetNodeListDelegate, this.onGetNodeListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNodes(enabledOnly, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<System.Guid, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetNodes(System.IAsyncResult result) {
            return base.Channel.EndGetNodes(result);
        }
        
        private System.IAsyncResult OnBeginGetNodes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetNodes(enabledOnly, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetNodes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<System.Guid, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetNodes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNodesCompleted(object state) {
            if ((this.GetNodesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNodesCompleted(this, new GetNodesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNodesAsync(bool enabledOnly, bool isOptional) {
            this.GetNodesAsync(enabledOnly, isOptional, null);
        }
        
        public void GetNodesAsync(bool enabledOnly, bool isOptional, object userState) {
            if ((this.onBeginGetNodesDelegate == null)) {
                this.onBeginGetNodesDelegate = new BeginOperationDelegate(this.OnBeginGetNodes);
            }
            if ((this.onEndGetNodesDelegate == null)) {
                this.onEndGetNodesDelegate = new EndOperationDelegate(this.OnEndGetNodes);
            }
            if ((this.onGetNodesCompletedDelegate == null)) {
                this.onGetNodesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNodesCompleted);
            }
            base.InvokeAsync(this.onBeginGetNodesDelegate, new object[] {
                        enabledOnly,
                        isOptional}, this.onEndGetNodesDelegate, this.onGetNodesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveNode(openPDCManager.Silverlight.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveNode(node, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveNode(System.IAsyncResult result) {
            return base.Channel.EndSaveNode(result);
        }
        
        private System.IAsyncResult OnBeginSaveNode(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Node node = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Node)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveNode(node, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveNode(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveNode(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveNodeCompleted(object state) {
            if ((this.SaveNodeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveNodeCompleted(this, new SaveNodeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveNodeAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Node node, bool isNew) {
            this.SaveNodeAsync(node, isNew, null);
        }
        
        public void SaveNodeAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Node node, bool isNew, object userState) {
            if ((this.onBeginSaveNodeDelegate == null)) {
                this.onBeginSaveNodeDelegate = new BeginOperationDelegate(this.OnBeginSaveNode);
            }
            if ((this.onEndSaveNodeDelegate == null)) {
                this.onEndSaveNodeDelegate = new EndOperationDelegate(this.OnEndSaveNode);
            }
            if ((this.onSaveNodeCompletedDelegate == null)) {
                this.onSaveNodeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveNodeCompleted);
            }
            base.InvokeAsync(this.onBeginSaveNodeDelegate, new object[] {
                        node,
                        isNew}, this.onEndSaveNodeDelegate, this.onSaveNodeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanyList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetCompanyList(System.IAsyncResult result) {
            return base.Channel.EndGetCompanyList(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanyList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCompanyList(callback, asyncState);
        }
        
        private object[] OnEndGetCompanyList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCompanyList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompanyListCompleted(object state) {
            if ((this.GetCompanyListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompanyListCompleted(this, new GetCompanyListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompanyListAsync() {
            this.GetCompanyListAsync(null);
        }
        
        public void GetCompanyListAsync(object userState) {
            if ((this.onBeginGetCompanyListDelegate == null)) {
                this.onBeginGetCompanyListDelegate = new BeginOperationDelegate(this.OnBeginGetCompanyList);
            }
            if ((this.onEndGetCompanyListDelegate == null)) {
                this.onEndGetCompanyListDelegate = new EndOperationDelegate(this.OnEndGetCompanyList);
            }
            if ((this.onGetCompanyListCompletedDelegate == null)) {
                this.onGetCompanyListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompanyListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompanyListDelegate, null, this.onEndGetCompanyListDelegate, this.onGetCompanyListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCompanies(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetCompanies(System.IAsyncResult result) {
            return base.Channel.EndGetCompanies(result);
        }
        
        private System.IAsyncResult OnBeginGetCompanies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCompanies(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetCompanies(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCompanies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCompaniesCompleted(object state) {
            if ((this.GetCompaniesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCompaniesCompleted(this, new GetCompaniesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCompaniesAsync(bool isOptional) {
            this.GetCompaniesAsync(isOptional, null);
        }
        
        public void GetCompaniesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetCompaniesDelegate == null)) {
                this.onBeginGetCompaniesDelegate = new BeginOperationDelegate(this.OnBeginGetCompanies);
            }
            if ((this.onEndGetCompaniesDelegate == null)) {
                this.onEndGetCompaniesDelegate = new EndOperationDelegate(this.OnEndGetCompanies);
            }
            if ((this.onGetCompaniesCompletedDelegate == null)) {
                this.onGetCompaniesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCompaniesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCompaniesDelegate, new object[] {
                        isOptional}, this.onEndGetCompaniesDelegate, this.onGetCompaniesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveCompany(openPDCManager.Silverlight.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCompany(company, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveCompany(System.IAsyncResult result) {
            return base.Channel.EndSaveCompany(result);
        }
        
        private System.IAsyncResult OnBeginSaveCompany(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Company company = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Company)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveCompany(company, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveCompany(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveCompany(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCompanyCompleted(object state) {
            if ((this.SaveCompanyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCompanyCompleted(this, new SaveCompanyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCompanyAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Company company, bool isNew) {
            this.SaveCompanyAsync(company, isNew, null);
        }
        
        public void SaveCompanyAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Company company, bool isNew, object userState) {
            if ((this.onBeginSaveCompanyDelegate == null)) {
                this.onBeginSaveCompanyDelegate = new BeginOperationDelegate(this.OnBeginSaveCompany);
            }
            if ((this.onEndSaveCompanyDelegate == null)) {
                this.onEndSaveCompanyDelegate = new EndOperationDelegate(this.OnEndSaveCompany);
            }
            if ((this.onSaveCompanyCompletedDelegate == null)) {
                this.onSaveCompanyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCompanyCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCompanyDelegate, new object[] {
                        company,
                        isNew}, this.onEndSaveCompanyDelegate, this.onSaveCompanyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetHistorianList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistorianList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetHistorianList(System.IAsyncResult result) {
            return base.Channel.EndGetHistorianList(result);
        }
        
        private System.IAsyncResult OnBeginGetHistorianList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid nodeID = ((System.Guid)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetHistorianList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetHistorianList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetHistorianList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistorianListCompleted(object state) {
            if ((this.GetHistorianListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistorianListCompleted(this, new GetHistorianListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistorianListAsync(System.Guid nodeID) {
            this.GetHistorianListAsync(nodeID, null);
        }
        
        public void GetHistorianListAsync(System.Guid nodeID, object userState) {
            if ((this.onBeginGetHistorianListDelegate == null)) {
                this.onBeginGetHistorianListDelegate = new BeginOperationDelegate(this.OnBeginGetHistorianList);
            }
            if ((this.onEndGetHistorianListDelegate == null)) {
                this.onEndGetHistorianListDelegate = new EndOperationDelegate(this.OnEndGetHistorianList);
            }
            if ((this.onGetHistorianListCompletedDelegate == null)) {
                this.onGetHistorianListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistorianListCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistorianListDelegate, new object[] {
                        nodeID}, this.onEndGetHistorianListDelegate, this.onGetHistorianListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveHistorian(openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveHistorian(historian, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveHistorian(System.IAsyncResult result) {
            return base.Channel.EndSaveHistorian(result);
        }
        
        private System.IAsyncResult OnBeginSaveHistorian(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Historian)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveHistorian(historian, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveHistorian(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveHistorian(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveHistorianCompleted(object state) {
            if ((this.SaveHistorianCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveHistorianCompleted(this, new SaveHistorianCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveHistorianAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian, bool isNew) {
            this.SaveHistorianAsync(historian, isNew, null);
        }
        
        public void SaveHistorianAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian, bool isNew, object userState) {
            if ((this.onBeginSaveHistorianDelegate == null)) {
                this.onBeginSaveHistorianDelegate = new BeginOperationDelegate(this.OnBeginSaveHistorian);
            }
            if ((this.onEndSaveHistorianDelegate == null)) {
                this.onEndSaveHistorianDelegate = new EndOperationDelegate(this.OnEndSaveHistorian);
            }
            if ((this.onSaveHistorianCompletedDelegate == null)) {
                this.onSaveHistorianCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveHistorianCompleted);
            }
            base.InvokeAsync(this.onBeginSaveHistorianDelegate, new object[] {
                        historian,
                        isNew}, this.onEndSaveHistorianDelegate, this.onSaveHistorianCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetHistorians(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetHistorians(enabledOnly, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetHistorians(System.IAsyncResult result) {
            return base.Channel.EndGetHistorians(result);
        }
        
        private System.IAsyncResult OnBeginGetHistorians(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetHistorians(enabledOnly, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetHistorians(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetHistorians(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetHistoriansCompleted(object state) {
            if ((this.GetHistoriansCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetHistoriansCompleted(this, new GetHistoriansCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetHistoriansAsync(bool enabledOnly, bool isOptional) {
            this.GetHistoriansAsync(enabledOnly, isOptional, null);
        }
        
        public void GetHistoriansAsync(bool enabledOnly, bool isOptional, object userState) {
            if ((this.onBeginGetHistoriansDelegate == null)) {
                this.onBeginGetHistoriansDelegate = new BeginOperationDelegate(this.OnBeginGetHistorians);
            }
            if ((this.onEndGetHistoriansDelegate == null)) {
                this.onEndGetHistoriansDelegate = new EndOperationDelegate(this.OnEndGetHistorians);
            }
            if ((this.onGetHistoriansCompletedDelegate == null)) {
                this.onGetHistoriansCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetHistoriansCompleted);
            }
            base.InvokeAsync(this.onBeginGetHistoriansDelegate, new object[] {
                        enabledOnly,
                        isOptional}, this.onEndGetHistoriansDelegate, this.onGetHistoriansCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorList(System.IAsyncResult result) {
            return base.Channel.EndGetVendorList(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorList(callback, asyncState);
        }
        
        private object[] OnEndGetVendorList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorListCompleted(object state) {
            if ((this.GetVendorListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorListCompleted(this, new GetVendorListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorListAsync() {
            this.GetVendorListAsync(null);
        }
        
        public void GetVendorListAsync(object userState) {
            if ((this.onBeginGetVendorListDelegate == null)) {
                this.onBeginGetVendorListDelegate = new BeginOperationDelegate(this.OnBeginGetVendorList);
            }
            if ((this.onEndGetVendorListDelegate == null)) {
                this.onEndGetVendorListDelegate = new EndOperationDelegate(this.OnEndGetVendorList);
            }
            if ((this.onGetVendorListCompletedDelegate == null)) {
                this.onGetVendorListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorListDelegate, null, this.onEndGetVendorListDelegate, this.onGetVendorListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendors(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetVendors(System.IAsyncResult result) {
            return base.Channel.EndGetVendors(result);
        }
        
        private System.IAsyncResult OnBeginGetVendors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendors(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetVendors(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorsCompleted(object state) {
            if ((this.GetVendorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorsCompleted(this, new GetVendorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorsAsync(bool isOptional) {
            this.GetVendorsAsync(isOptional, null);
        }
        
        public void GetVendorsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetVendorsDelegate == null)) {
                this.onBeginGetVendorsDelegate = new BeginOperationDelegate(this.OnBeginGetVendors);
            }
            if ((this.onEndGetVendorsDelegate == null)) {
                this.onEndGetVendorsDelegate = new EndOperationDelegate(this.OnEndGetVendors);
            }
            if ((this.onGetVendorsCompletedDelegate == null)) {
                this.onGetVendorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorsCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorsDelegate, new object[] {
                        isOptional}, this.onEndGetVendorsDelegate, this.onGetVendorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveVendor(openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveVendor(vendor, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveVendor(System.IAsyncResult result) {
            return base.Channel.EndSaveVendor(result);
        }
        
        private System.IAsyncResult OnBeginSaveVendor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveVendor(vendor, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveVendor(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveVendor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveVendorCompleted(object state) {
            if ((this.SaveVendorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveVendorCompleted(this, new SaveVendorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveVendorAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor, bool isNew) {
            this.SaveVendorAsync(vendor, isNew, null);
        }
        
        public void SaveVendorAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor, bool isNew, object userState) {
            if ((this.onBeginSaveVendorDelegate == null)) {
                this.onBeginSaveVendorDelegate = new BeginOperationDelegate(this.OnBeginSaveVendor);
            }
            if ((this.onEndSaveVendorDelegate == null)) {
                this.onEndSaveVendorDelegate = new EndOperationDelegate(this.OnEndSaveVendor);
            }
            if ((this.onSaveVendorCompletedDelegate == null)) {
                this.onSaveVendorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveVendorCompleted);
            }
            base.InvokeAsync(this.onBeginSaveVendorDelegate, new object[] {
                        vendor,
                        isNew}, this.onEndSaveVendorDelegate, this.onSaveVendorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorDeviceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetVendorDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorDeviceList(callback, asyncState);
        }
        
        private object[] OnEndGetVendorDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorDeviceListCompleted(object state) {
            if ((this.GetVendorDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorDeviceListCompleted(this, new GetVendorDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorDeviceListAsync() {
            this.GetVendorDeviceListAsync(null);
        }
        
        public void GetVendorDeviceListAsync(object userState) {
            if ((this.onBeginGetVendorDeviceListDelegate == null)) {
                this.onBeginGetVendorDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetVendorDeviceList);
            }
            if ((this.onEndGetVendorDeviceListDelegate == null)) {
                this.onEndGetVendorDeviceListDelegate = new EndOperationDelegate(this.OnEndGetVendorDeviceList);
            }
            if ((this.onGetVendorDeviceListCompletedDelegate == null)) {
                this.onGetVendorDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorDeviceListDelegate, null, this.onEndGetVendorDeviceListDelegate, this.onGetVendorDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveVendorDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveVendorDevice(vendorDevice, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveVendorDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveVendorDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveVendorDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice = ((openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveVendorDevice(vendorDevice, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveVendorDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveVendorDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveVendorDeviceCompleted(object state) {
            if ((this.SaveVendorDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveVendorDeviceCompleted(this, new SaveVendorDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveVendorDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew) {
            this.SaveVendorDeviceAsync(vendorDevice, isNew, null);
        }
        
        public void SaveVendorDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, object userState) {
            if ((this.onBeginSaveVendorDeviceDelegate == null)) {
                this.onBeginSaveVendorDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveVendorDevice);
            }
            if ((this.onEndSaveVendorDeviceDelegate == null)) {
                this.onEndSaveVendorDeviceDelegate = new EndOperationDelegate(this.OnEndSaveVendorDevice);
            }
            if ((this.onSaveVendorDeviceCompletedDelegate == null)) {
                this.onSaveVendorDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveVendorDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveVendorDeviceDelegate, new object[] {
                        vendorDevice,
                        isNew}, this.onEndSaveVendorDeviceDelegate, this.onSaveVendorDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVendorDevices(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetVendorDevices(System.IAsyncResult result) {
            return base.Channel.EndGetVendorDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetVendorDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetVendorDevices(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetVendorDevices(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetVendorDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVendorDevicesCompleted(object state) {
            if ((this.GetVendorDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVendorDevicesCompleted(this, new GetVendorDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVendorDevicesAsync(bool isOptional) {
            this.GetVendorDevicesAsync(isOptional, null);
        }
        
        public void GetVendorDevicesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetVendorDevicesDelegate == null)) {
                this.onBeginGetVendorDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetVendorDevices);
            }
            if ((this.onEndGetVendorDevicesDelegate == null)) {
                this.onEndGetVendorDevicesDelegate = new EndOperationDelegate(this.OnEndGetVendorDevices);
            }
            if ((this.onGetVendorDevicesCompletedDelegate == null)) {
                this.onGetVendorDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVendorDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetVendorDevicesDelegate, new object[] {
                        isOptional}, this.onEndGetVendorDevicesDelegate, this.onGetVendorDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid nodeID = ((System.Guid)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceListCompleted(object state) {
            if ((this.GetDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceListCompleted(this, new GetDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceListAsync(System.Guid nodeID) {
            this.GetDeviceListAsync(nodeID, null);
        }
        
        public void GetDeviceListAsync(System.Guid nodeID, object userState) {
            if ((this.onBeginGetDeviceListDelegate == null)) {
                this.onBeginGetDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceList);
            }
            if ((this.onEndGetDeviceListDelegate == null)) {
                this.onEndGetDeviceListDelegate = new EndOperationDelegate(this.OnEndGetDeviceList);
            }
            if ((this.onGetDeviceListCompletedDelegate == null)) {
                this.onGetDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceListDelegate, new object[] {
                        nodeID}, this.onEndGetDeviceListDelegate, this.onGetDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetDevices(bool concentratorOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDevices(concentratorOnly, isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetDevices(System.IAsyncResult result) {
            return base.Channel.EndGetDevices(result);
        }
        
        private System.IAsyncResult OnBeginGetDevices(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool concentratorOnly = ((bool)(inValues[0]));
            bool isOptional = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDevices(concentratorOnly, isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetDevices(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDevices(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDevicesCompleted(object state) {
            if ((this.GetDevicesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDevicesCompleted(this, new GetDevicesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDevicesAsync(bool concentratorOnly, bool isOptional) {
            this.GetDevicesAsync(concentratorOnly, isOptional, null);
        }
        
        public void GetDevicesAsync(bool concentratorOnly, bool isOptional, object userState) {
            if ((this.onBeginGetDevicesDelegate == null)) {
                this.onBeginGetDevicesDelegate = new BeginOperationDelegate(this.OnBeginGetDevices);
            }
            if ((this.onEndGetDevicesDelegate == null)) {
                this.onEndGetDevicesDelegate = new EndOperationDelegate(this.OnEndGetDevices);
            }
            if ((this.onGetDevicesCompletedDelegate == null)) {
                this.onGetDevicesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDevicesCompleted);
            }
            base.InvokeAsync(this.onBeginGetDevicesDelegate, new object[] {
                        concentratorOnly,
                        isOptional}, this.onEndGetDevicesDelegate, this.onGetDevicesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.Device device, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveDevice(device, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Device device = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Device)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveDevice(device, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveDeviceCompleted(object state) {
            if ((this.SaveDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveDeviceCompleted(this, new SaveDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Device device, bool isNew) {
            this.SaveDeviceAsync(device, isNew, null);
        }
        
        public void SaveDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Device device, bool isNew, object userState) {
            if ((this.onBeginSaveDeviceDelegate == null)) {
                this.onBeginSaveDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveDevice);
            }
            if ((this.onEndSaveDeviceDelegate == null)) {
                this.onEndSaveDeviceDelegate = new EndOperationDelegate(this.OnEndSaveDevice);
            }
            if ((this.onSaveDeviceCompletedDelegate == null)) {
                this.onSaveDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDeviceDelegate, new object[] {
                        device,
                        isNew}, this.onEndSaveDeviceDelegate, this.onSaveDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.Silverlight.PhasorDataServiceProxy.Device openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetDeviceByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetDeviceByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetDeviceByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetDeviceByDeviceID(System.IAsyncResult result) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Device retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetDeviceByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeviceByDeviceIDCompleted(object state) {
            if ((this.GetDeviceByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeviceByDeviceIDCompleted(this, new GetDeviceByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeviceByDeviceIDAsync(int deviceID) {
            this.GetDeviceByDeviceIDAsync(deviceID, null);
        }
        
        public void GetDeviceByDeviceIDAsync(int deviceID, object userState) {
            if ((this.onBeginGetDeviceByDeviceIDDelegate == null)) {
                this.onBeginGetDeviceByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetDeviceByDeviceID);
            }
            if ((this.onEndGetDeviceByDeviceIDDelegate == null)) {
                this.onEndGetDeviceByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetDeviceByDeviceID);
            }
            if ((this.onGetDeviceByDeviceIDCompletedDelegate == null)) {
                this.onGetDeviceByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeviceByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeviceByDeviceIDDelegate, new object[] {
                        deviceID}, this.onEndGetDeviceByDeviceIDDelegate, this.onGetDeviceByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOtherDeviceList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetOtherDeviceList(System.IAsyncResult result) {
            return base.Channel.EndGetOtherDeviceList(result);
        }
        
        private System.IAsyncResult OnBeginGetOtherDeviceList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOtherDeviceList(callback, asyncState);
        }
        
        private object[] OnEndGetOtherDeviceList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOtherDeviceList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOtherDeviceListCompleted(object state) {
            if ((this.GetOtherDeviceListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOtherDeviceListCompleted(this, new GetOtherDeviceListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOtherDeviceListAsync() {
            this.GetOtherDeviceListAsync(null);
        }
        
        public void GetOtherDeviceListAsync(object userState) {
            if ((this.onBeginGetOtherDeviceListDelegate == null)) {
                this.onBeginGetOtherDeviceListDelegate = new BeginOperationDelegate(this.OnBeginGetOtherDeviceList);
            }
            if ((this.onEndGetOtherDeviceListDelegate == null)) {
                this.onEndGetOtherDeviceListDelegate = new EndOperationDelegate(this.OnEndGetOtherDeviceList);
            }
            if ((this.onGetOtherDeviceListCompletedDelegate == null)) {
                this.onGetOtherDeviceListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOtherDeviceListCompleted);
            }
            base.InvokeAsync(this.onBeginGetOtherDeviceListDelegate, null, this.onEndGetOtherDeviceListDelegate, this.onGetOtherDeviceListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveOtherDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveOtherDevice(otherDevice, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveOtherDevice(System.IAsyncResult result) {
            return base.Channel.EndSaveOtherDevice(result);
        }
        
        private System.IAsyncResult OnBeginSaveOtherDevice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice = ((openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveOtherDevice(otherDevice, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveOtherDevice(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveOtherDevice(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveOtherDeviceCompleted(object state) {
            if ((this.SaveOtherDeviceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveOtherDeviceCompleted(this, new SaveOtherDeviceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveOtherDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew) {
            this.SaveOtherDeviceAsync(otherDevice, isNew, null);
        }
        
        public void SaveOtherDeviceAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, object userState) {
            if ((this.onBeginSaveOtherDeviceDelegate == null)) {
                this.onBeginSaveOtherDeviceDelegate = new BeginOperationDelegate(this.OnBeginSaveOtherDevice);
            }
            if ((this.onEndSaveOtherDeviceDelegate == null)) {
                this.onEndSaveOtherDeviceDelegate = new EndOperationDelegate(this.OnEndSaveOtherDevice);
            }
            if ((this.onSaveOtherDeviceCompletedDelegate == null)) {
                this.onSaveOtherDeviceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveOtherDeviceCompleted);
            }
            base.InvokeAsync(this.onBeginSaveOtherDeviceDelegate, new object[] {
                        otherDevice,
                        isNew}, this.onEndSaveOtherDeviceDelegate, this.onSaveOtherDeviceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetOtherDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
            return base.Channel.EndGetOtherDeviceByDeviceID(result);
        }
        
        private System.IAsyncResult OnBeginGetOtherDeviceByDeviceID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int deviceID = ((int)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetOtherDeviceByDeviceID(deviceID, callback, asyncState);
        }
        
        private object[] OnEndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetOtherDeviceByDeviceID(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetOtherDeviceByDeviceIDCompleted(object state) {
            if ((this.GetOtherDeviceByDeviceIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetOtherDeviceByDeviceIDCompleted(this, new GetOtherDeviceByDeviceIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetOtherDeviceByDeviceIDAsync(int deviceID) {
            this.GetOtherDeviceByDeviceIDAsync(deviceID, null);
        }
        
        public void GetOtherDeviceByDeviceIDAsync(int deviceID, object userState) {
            if ((this.onBeginGetOtherDeviceByDeviceIDDelegate == null)) {
                this.onBeginGetOtherDeviceByDeviceIDDelegate = new BeginOperationDelegate(this.OnBeginGetOtherDeviceByDeviceID);
            }
            if ((this.onEndGetOtherDeviceByDeviceIDDelegate == null)) {
                this.onEndGetOtherDeviceByDeviceIDDelegate = new EndOperationDelegate(this.OnEndGetOtherDeviceByDeviceID);
            }
            if ((this.onGetOtherDeviceByDeviceIDCompletedDelegate == null)) {
                this.onGetOtherDeviceByDeviceIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetOtherDeviceByDeviceIDCompleted);
            }
            base.InvokeAsync(this.onBeginGetOtherDeviceByDeviceIDDelegate, new object[] {
                        deviceID}, this.onEndGetOtherDeviceByDeviceIDDelegate, this.onGetOtherDeviceByDeviceIDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInterconnections(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetInterconnections(System.IAsyncResult result) {
            return base.Channel.EndGetInterconnections(result);
        }
        
        private System.IAsyncResult OnBeginGetInterconnections(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetInterconnections(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetInterconnections(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetInterconnections(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInterconnectionsCompleted(object state) {
            if ((this.GetInterconnectionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInterconnectionsCompleted(this, new GetInterconnectionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInterconnectionsAsync(bool isOptional) {
            this.GetInterconnectionsAsync(isOptional, null);
        }
        
        public void GetInterconnectionsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetInterconnectionsDelegate == null)) {
                this.onBeginGetInterconnectionsDelegate = new BeginOperationDelegate(this.OnBeginGetInterconnections);
            }
            if ((this.onEndGetInterconnectionsDelegate == null)) {
                this.onEndGetInterconnectionsDelegate = new EndOperationDelegate(this.OnEndGetInterconnections);
            }
            if ((this.onGetInterconnectionsCompletedDelegate == null)) {
                this.onGetInterconnectionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInterconnectionsCompleted);
            }
            base.InvokeAsync(this.onBeginGetInterconnectionsDelegate, new object[] {
                        isOptional}, this.onEndGetInterconnectionsDelegate, this.onGetInterconnectionsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProtocols(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetProtocols(System.IAsyncResult result) {
            return base.Channel.EndGetProtocols(result);
        }
        
        private System.IAsyncResult OnBeginGetProtocols(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetProtocols(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetProtocols(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetProtocols(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProtocolsCompleted(object state) {
            if ((this.GetProtocolsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProtocolsCompleted(this, new GetProtocolsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProtocolsAsync(bool isOptional) {
            this.GetProtocolsAsync(isOptional, null);
        }
        
        public void GetProtocolsAsync(bool isOptional, object userState) {
            if ((this.onBeginGetProtocolsDelegate == null)) {
                this.onBeginGetProtocolsDelegate = new BeginOperationDelegate(this.OnBeginGetProtocols);
            }
            if ((this.onEndGetProtocolsDelegate == null)) {
                this.onEndGetProtocolsDelegate = new EndOperationDelegate(this.OnEndGetProtocols);
            }
            if ((this.onGetProtocolsCompletedDelegate == null)) {
                this.onGetProtocolsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProtocolsCompleted);
            }
            base.InvokeAsync(this.onBeginGetProtocolsDelegate, new object[] {
                        isOptional}, this.onEndGetProtocolsDelegate, this.onGetProtocolsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetCalculatedMeasurementList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalculatedMeasurementList(nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetCalculatedMeasurementList(System.IAsyncResult result) {
            return base.Channel.EndGetCalculatedMeasurementList(result);
        }
        
        private System.IAsyncResult OnBeginGetCalculatedMeasurementList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid nodeID = ((System.Guid)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetCalculatedMeasurementList(nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetCalculatedMeasurementList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetCalculatedMeasurementList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCalculatedMeasurementListCompleted(object state) {
            if ((this.GetCalculatedMeasurementListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCalculatedMeasurementListCompleted(this, new GetCalculatedMeasurementListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCalculatedMeasurementListAsync(System.Guid nodeID) {
            this.GetCalculatedMeasurementListAsync(nodeID, null);
        }
        
        public void GetCalculatedMeasurementListAsync(System.Guid nodeID, object userState) {
            if ((this.onBeginGetCalculatedMeasurementListDelegate == null)) {
                this.onBeginGetCalculatedMeasurementListDelegate = new BeginOperationDelegate(this.OnBeginGetCalculatedMeasurementList);
            }
            if ((this.onEndGetCalculatedMeasurementListDelegate == null)) {
                this.onEndGetCalculatedMeasurementListDelegate = new EndOperationDelegate(this.OnEndGetCalculatedMeasurementList);
            }
            if ((this.onGetCalculatedMeasurementListCompletedDelegate == null)) {
                this.onGetCalculatedMeasurementListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCalculatedMeasurementListCompleted);
            }
            base.InvokeAsync(this.onBeginGetCalculatedMeasurementListDelegate, new object[] {
                        nodeID}, this.onEndGetCalculatedMeasurementListDelegate, this.onGetCalculatedMeasurementListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveCalculatedMeasurement(openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveCalculatedMeasurement(calculatedMeasurement, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveCalculatedMeasurement(System.IAsyncResult result) {
            return base.Channel.EndSaveCalculatedMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginSaveCalculatedMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement = ((openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveCalculatedMeasurement(calculatedMeasurement, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveCalculatedMeasurement(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveCalculatedMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveCalculatedMeasurementCompleted(object state) {
            if ((this.SaveCalculatedMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveCalculatedMeasurementCompleted(this, new SaveCalculatedMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveCalculatedMeasurementAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew) {
            this.SaveCalculatedMeasurementAsync(calculatedMeasurement, isNew, null);
        }
        
        public void SaveCalculatedMeasurementAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, object userState) {
            if ((this.onBeginSaveCalculatedMeasurementDelegate == null)) {
                this.onBeginSaveCalculatedMeasurementDelegate = new BeginOperationDelegate(this.OnBeginSaveCalculatedMeasurement);
            }
            if ((this.onEndSaveCalculatedMeasurementDelegate == null)) {
                this.onEndSaveCalculatedMeasurementDelegate = new EndOperationDelegate(this.OnEndSaveCalculatedMeasurement);
            }
            if ((this.onSaveCalculatedMeasurementCompletedDelegate == null)) {
                this.onSaveCalculatedMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveCalculatedMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginSaveCalculatedMeasurementDelegate, new object[] {
                        calculatedMeasurement,
                        isNew}, this.onEndSaveCalculatedMeasurementDelegate, this.onSaveCalculatedMeasurementCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetAdapterList(bool enabledOnly, openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType, System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdapterList(enabledOnly, adapterType, nodeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetAdapterList(System.IAsyncResult result) {
            return base.Channel.EndGetAdapterList(result);
        }
        
        private System.IAsyncResult OnBeginGetAdapterList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool enabledOnly = ((bool)(inValues[0]));
            openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType = ((openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType)(inValues[1]));
            System.Guid nodeID = ((System.Guid)(inValues[2]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetAdapterList(enabledOnly, adapterType, nodeID, callback, asyncState);
        }
        
        private object[] OnEndGetAdapterList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetAdapterList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdapterListCompleted(object state) {
            if ((this.GetAdapterListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdapterListCompleted(this, new GetAdapterListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdapterListAsync(bool enabledOnly, openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType, System.Guid nodeID) {
            this.GetAdapterListAsync(enabledOnly, adapterType, nodeID, null);
        }
        
        public void GetAdapterListAsync(bool enabledOnly, openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType, System.Guid nodeID, object userState) {
            if ((this.onBeginGetAdapterListDelegate == null)) {
                this.onBeginGetAdapterListDelegate = new BeginOperationDelegate(this.OnBeginGetAdapterList);
            }
            if ((this.onEndGetAdapterListDelegate == null)) {
                this.onEndGetAdapterListDelegate = new EndOperationDelegate(this.OnEndGetAdapterList);
            }
            if ((this.onGetAdapterListCompletedDelegate == null)) {
                this.onGetAdapterListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdapterListCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdapterListDelegate, new object[] {
                        enabledOnly,
                        adapterType,
                        nodeID}, this.onEndGetAdapterListDelegate, this.onGetAdapterListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginSaveAdapter(openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveAdapter(adapter, isNew, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndSaveAdapter(System.IAsyncResult result) {
            return base.Channel.EndSaveAdapter(result);
        }
        
        private System.IAsyncResult OnBeginSaveAdapter(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter)(inValues[0]));
            bool isNew = ((bool)(inValues[1]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginSaveAdapter(adapter, isNew, callback, asyncState);
        }
        
        private object[] OnEndSaveAdapter(System.IAsyncResult result) {
            string retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndSaveAdapter(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveAdapterCompleted(object state) {
            if ((this.SaveAdapterCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveAdapterCompleted(this, new SaveAdapterCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveAdapterAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter, bool isNew) {
            this.SaveAdapterAsync(adapter, isNew, null);
        }
        
        public void SaveAdapterAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter, bool isNew, object userState) {
            if ((this.onBeginSaveAdapterDelegate == null)) {
                this.onBeginSaveAdapterDelegate = new BeginOperationDelegate(this.OnBeginSaveAdapter);
            }
            if ((this.onEndSaveAdapterDelegate == null)) {
                this.onEndSaveAdapterDelegate = new EndOperationDelegate(this.OnEndSaveAdapter);
            }
            if ((this.onSaveAdapterCompletedDelegate == null)) {
                this.onSaveAdapterCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveAdapterCompleted);
            }
            base.InvokeAsync(this.onBeginSaveAdapterDelegate, new object[] {
                        adapter,
                        isNew}, this.onEndSaveAdapterDelegate, this.onSaveAdapterCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetIaonTreeData(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetIaonTreeData(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetIaonTreeData(System.IAsyncResult result) {
            return base.Channel.EndGetIaonTreeData(result);
        }
        
        private System.IAsyncResult OnBeginGetIaonTreeData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetIaonTreeData(callback, asyncState);
        }
        
        private object[] OnEndGetIaonTreeData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetIaonTreeData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetIaonTreeDataCompleted(object state) {
            if ((this.GetIaonTreeDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetIaonTreeDataCompleted(this, new GetIaonTreeDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetIaonTreeDataAsync() {
            this.GetIaonTreeDataAsync(null);
        }
        
        public void GetIaonTreeDataAsync(object userState) {
            if ((this.onBeginGetIaonTreeDataDelegate == null)) {
                this.onBeginGetIaonTreeDataDelegate = new BeginOperationDelegate(this.OnBeginGetIaonTreeData);
            }
            if ((this.onEndGetIaonTreeDataDelegate == null)) {
                this.onEndGetIaonTreeDataDelegate = new EndOperationDelegate(this.OnEndGetIaonTreeData);
            }
            if ((this.onGetIaonTreeDataCompletedDelegate == null)) {
                this.onGetIaonTreeDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetIaonTreeDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetIaonTreeDataDelegate, null, this.onEndGetIaonTreeDataDelegate, this.onGetIaonTreeDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTimeZones(isOptional, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetTimeZones(System.IAsyncResult result) {
            return base.Channel.EndGetTimeZones(result);
        }
        
        private System.IAsyncResult OnBeginGetTimeZones(object[] inValues, System.AsyncCallback callback, object asyncState) {
            bool isOptional = ((bool)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetTimeZones(isOptional, callback, asyncState);
        }
        
        private object[] OnEndGetTimeZones(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetTimeZones(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTimeZonesCompleted(object state) {
            if ((this.GetTimeZonesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTimeZonesCompleted(this, new GetTimeZonesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTimeZonesAsync(bool isOptional) {
            this.GetTimeZonesAsync(isOptional, null);
        }
        
        public void GetTimeZonesAsync(bool isOptional, object userState) {
            if ((this.onBeginGetTimeZonesDelegate == null)) {
                this.onBeginGetTimeZonesDelegate = new BeginOperationDelegate(this.OnBeginGetTimeZones);
            }
            if ((this.onEndGetTimeZonesDelegate == null)) {
                this.onEndGetTimeZonesDelegate = new EndOperationDelegate(this.OnEndGetTimeZones);
            }
            if ((this.onGetTimeZonesCompletedDelegate == null)) {
                this.onGetTimeZonesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTimeZonesCompleted);
            }
            base.InvokeAsync(this.onBeginGetTimeZonesDelegate, new object[] {
                        isOptional}, this.onEndGetTimeZonesDelegate, this.onGetTimeZonesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.BeginGetMapData(openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMapData(mapType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService.EndGetMapData(System.IAsyncResult result) {
            return base.Channel.EndGetMapData(result);
        }
        
        private System.IAsyncResult OnBeginGetMapData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType = ((openPDCManager.Silverlight.PhasorDataServiceProxy.MapType)(inValues[0]));
            return ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).BeginGetMapData(mapType, callback, asyncState);
        }
        
        private object[] OnEndGetMapData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> retVal = ((openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService)(this)).EndGetMapData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMapDataCompleted(object state) {
            if ((this.GetMapDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMapDataCompleted(this, new GetMapDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMapDataAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType) {
            this.GetMapDataAsync(mapType, null);
        }
        
        public void GetMapDataAsync(openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType, object userState) {
            if ((this.onBeginGetMapDataDelegate == null)) {
                this.onBeginGetMapDataDelegate = new BeginOperationDelegate(this.OnBeginGetMapData);
            }
            if ((this.onEndGetMapDataDelegate == null)) {
                this.onEndGetMapDataDelegate = new EndOperationDelegate(this.OnEndGetMapData);
            }
            if ((this.onGetMapDataCompletedDelegate == null)) {
                this.onGetMapDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMapDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetMapDataDelegate, new object[] {
                        mapType}, this.onEndGetMapDataDelegate, this.onGetMapDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService CreateChannel() {
            return new PhasorDataServiceClientChannel(this);
        }
        
        private class PhasorDataServiceClientChannel : ChannelBase<openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService>, openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService {
            
            public PhasorDataServiceClientChannel(System.ServiceModel.ClientBase<openPDCManager.Silverlight.PhasorDataServiceProxy.IPhasorDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetNodeList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetNodeList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> EndGetNodeList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Node>)(base.EndInvoke("GetNodeList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNodes(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = enabledOnly;
                _args[1] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetNodes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<System.Guid, string> EndGetNodes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<System.Guid, string> _result = ((System.Collections.Generic.Dictionary<System.Guid, string>)(base.EndInvoke("GetNodes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveNode(openPDCManager.Silverlight.PhasorDataServiceProxy.Node node, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = node;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveNode", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveNode(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveNode", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanyList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetCompanyList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> EndGetCompanyList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Company>)(base.EndInvoke("GetCompanyList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCompanies(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetCompanies", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetCompanies(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetCompanies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCompany(openPDCManager.Silverlight.PhasorDataServiceProxy.Company company, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = company;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveCompany", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveCompany(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveCompany", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistorianList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetHistorianList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> EndGetHistorianList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Historian>)(base.EndInvoke("GetHistorianList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveHistorian(openPDCManager.Silverlight.PhasorDataServiceProxy.Historian historian, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = historian;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveHistorian", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveHistorian(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveHistorian", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetHistorians(bool enabledOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = enabledOnly;
                _args[1] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetHistorians", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetHistorians(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetHistorians", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVendorList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> EndGetVendorList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor>)(base.EndInvoke("GetVendorList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendors(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetVendors", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetVendors(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetVendors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveVendor(openPDCManager.Silverlight.PhasorDataServiceProxy.Vendor vendor, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vendor;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveVendor", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveVendor(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveVendor", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorDeviceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVendorDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> EndGetVendorDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice>)(base.EndInvoke("GetVendorDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveVendorDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.VendorDevice vendorDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = vendorDevice;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveVendorDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveVendorDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveVendorDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVendorDevices(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetVendorDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetVendorDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetVendorDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> EndGetDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Device>)(base.EndInvoke("GetDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDevices(bool concentratorOnly, bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = concentratorOnly;
                _args[1] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetDevices", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetDevices(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetDevices", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.Device device, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = device;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetDeviceByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.Silverlight.PhasorDataServiceProxy.Device EndGetDeviceByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.Silverlight.PhasorDataServiceProxy.Device _result = ((openPDCManager.Silverlight.PhasorDataServiceProxy.Device)(base.EndInvoke("GetDeviceByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOtherDeviceList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetOtherDeviceList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> EndGetOtherDeviceList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice>)(base.EndInvoke("GetOtherDeviceList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveOtherDevice(openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice otherDevice, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = otherDevice;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveOtherDevice", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveOtherDevice(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveOtherDevice", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetOtherDeviceByDeviceID(int deviceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = deviceID;
                System.IAsyncResult _result = base.BeginInvoke("GetOtherDeviceByDeviceID", _args, callback, asyncState);
                return _result;
            }
            
            public openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice EndGetOtherDeviceByDeviceID(System.IAsyncResult result) {
                object[] _args = new object[0];
                openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice _result = ((openPDCManager.Silverlight.PhasorDataServiceProxy.OtherDevice)(base.EndInvoke("GetOtherDeviceByDeviceID", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInterconnections(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetInterconnections", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetInterconnections(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetInterconnections", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProtocols(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetProtocols", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetProtocols(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetProtocols", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalculatedMeasurementList(System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetCalculatedMeasurementList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> EndGetCalculatedMeasurementList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement>)(base.EndInvoke("GetCalculatedMeasurementList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveCalculatedMeasurement(openPDCManager.Silverlight.PhasorDataServiceProxy.CalculatedMeasurement calculatedMeasurement, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = calculatedMeasurement;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveCalculatedMeasurement", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveCalculatedMeasurement(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveCalculatedMeasurement", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdapterList(bool enabledOnly, openPDCManager.Silverlight.PhasorDataServiceProxy.AdapterType adapterType, System.Guid nodeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = enabledOnly;
                _args[1] = adapterType;
                _args[2] = nodeID;
                System.IAsyncResult _result = base.BeginInvoke("GetAdapterList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> EndGetAdapterList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter>)(base.EndInvoke("GetAdapterList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveAdapter(openPDCManager.Silverlight.PhasorDataServiceProxy.Adapter adapter, bool isNew, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = adapter;
                _args[1] = isNew;
                System.IAsyncResult _result = base.BeginInvoke("SaveAdapter", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveAdapter(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveAdapter", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetIaonTreeData(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetIaonTreeData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> EndGetIaonTreeData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.IaonTree>)(base.EndInvoke("GetIaonTreeData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTimeZones(bool isOptional, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = isOptional;
                System.IAsyncResult _result = base.BeginInvoke("GetTimeZones", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetTimeZones(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetTimeZones", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMapData(openPDCManager.Silverlight.PhasorDataServiceProxy.MapType mapType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = mapType;
                System.IAsyncResult _result = base.BeginInvoke("GetMapData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> EndGetMapData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData> _result = ((System.Collections.ObjectModel.ObservableCollection<openPDCManager.Silverlight.PhasorDataServiceProxy.MapData>)(base.EndInvoke("GetMapData", _args, result)));
                return _result;
            }
        }
    }
}
